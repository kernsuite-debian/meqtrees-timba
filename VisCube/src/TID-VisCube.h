//
//% $Id$ 
//
//
// Copyright (C) 2002-2007
// The MeqTree Foundation & 
// ASTRON (Netherlands Foundation for Research in Astronomy)
// P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>,
// or write to the Free Software Foundation, Inc., 
// 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

      #ifndef TID_VisCube_h
      #define TID_VisCube_h 1
      
      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../Timba/DMI/aid/build_aid_maps.pl
      #include <DMI/TypeId.h>

      // should be called somewhere in order to link in the registry
      int aidRegistry_VisCube ();

#ifndef _defined_id_TpVisCubeColumnarTableTile
#define _defined_id_TpVisCubeColumnarTableTile 1
const DMI::TypeId TpVisCubeColumnarTableTile(-1157);// from /home/oms/LOFAR/Timba/VisCube/src/ColumnarTableTile.h:13
const int TpVisCubeColumnarTableTile_int = -1157;
namespace VisCube { class ColumnarTableTile; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::ColumnarTableTile> : public TypeTraits<VisCube::ColumnarTableTile>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeColumnarTableTile_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::ColumnarTableTile & ContainerReturnType;
                typedef const VisCube::ColumnarTableTile & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpVisCubeTableFormat
#define _defined_id_TpVisCubeTableFormat 1
const DMI::TypeId TpVisCubeTableFormat(-1121);    // from /home/oms/LOFAR/Timba/VisCube/src/TableFormat.h:9
const int TpVisCubeTableFormat_int = -1121;
namespace VisCube { class TableFormat; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::TableFormat> : public TypeTraits<VisCube::TableFormat>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeTableFormat_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::TableFormat & ContainerReturnType;
                typedef const VisCube::TableFormat & ContainerParamType;
              };
            };
#endif
#ifndef _defined_id_TpVisCubeVTile
#define _defined_id_TpVisCubeVTile 1
const DMI::TypeId TpVisCubeVTile(-1138);          // from /home/oms/LOFAR/Timba/VisCube/src/VTile.h:32
const int TpVisCubeVTile_int = -1138;
namespace VisCube { class VTile; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<VisCube::VTile> : public TypeTraits<VisCube::VTile>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpVisCubeVTile_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const VisCube::VTile & ContainerReturnType;
                typedef const VisCube::VTile & ContainerParamType;
              };
            };
#endif


#endif
