# standard preamble
from Timba.TDL import *
 
# Timba.TDL.Settings.forest_state is a standard TDL name. 
# This is a record passed to Set.Forest.State. 
Settings.forest_state.cache_policy = 100;

# Make sure our solver root node is not cleaned up
Settings.orphans_are_roots = True;

def _define_forest (ns):
  """define_forest() is a standard TDL name. When a forest script is
  loaded by, e.g., the browser, this method is automatically called to
  define the forest. The 'ns' argument is a NodeScope object in which
  the forest is to be defined, usually this is simply the global scope.
  """;
  ns.add << (ns.freq << Meq.Freq) + (ns.time << Meq.Time);
  ns.history << Meq.HistoryCollect(ns.add,verbose=True);
  ns.root = Meq.Add(ns.add,stepchildren=[ns.history]);

def _test_forest (mqs,parent):
  """test_forest() is a standard TDL name. When a forest script is
  loaded by, e.g., the browser, and the "test" option is set to true,
  this method is automatically called after define_forest() to run a 
  test on the forest. The 'mqs' argument is a meqserver proxy object.
  """;
  from Timba.Meq import meq
  # run tests on the forest
  for x in range(10):
    cells = meq.cells(meq.domain(x,x+1,x,x+1),num_freq=6,num_time=4);
    request = meq.request(cells,eval_mode=0);
    mqs.meq('Node.Execute',record(name='root',request=request));
  mqs.meq('Save.Forest',record(file_name='history.forest.save'));
  
# this is the testing branch, executed when the script is run directly
# via 'python script.py'

if __name__ == '__main__':
#  from Timba.Meq import meqds 
  Timba.TDL._dbg.set_verbose(5);
  ns = NodeScope();
  _define_forest(ns);
  # resolves nodes
  ns.Resolve();
