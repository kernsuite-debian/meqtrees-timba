//
//% $Id$ 
//
//
// Copyright (C) 2002-2007
// The MeqTree Foundation & 
// ASTRON (Netherlands Foundation for Research in Astronomy)
// P.O.Box 2, 7990 AA Dwingeloo, The Netherlands
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>,
// or write to the Free Software Foundation, Inc., 
// 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

      #ifndef TID_OCTOPUSSY_h
      #define TID_OCTOPUSSY_h 1
      
      // This file is generated automatically -- do not edit
      // Generated by /home/oms/LOFAR/autoconf_share/../Timba/DMI/aid/build_aid_maps.pl
      #include <DMI/TypeId.h>

      // should be called somewhere in order to link in the registry
      int aidRegistry_OCTOPUSSY ();

#ifndef _defined_id_TpOctopussyMessage
#define _defined_id_TpOctopussyMessage 1
const DMI::TypeId TpOctopussyMessage(-1049);      // from /home/oms/LOFAR/Timba/OCTOPUSSY/src/Message.h:29
const int TpOctopussyMessage_int = -1049;
namespace Octopussy { class Message; };
            namespace DMI {
              template<>
              class DMIBaseTypeTraits<Octopussy::Message> : public TypeTraits<Octopussy::Message>
              {
                public:
                enum { isContainable = true };
                enum { typeId = TpOctopussyMessage_int };
                enum { TypeCategory = TypeCategories::DYNAMIC };
                enum { ParamByRef = true, ReturnByRef = true };
                typedef const Octopussy::Message & ContainerReturnType;
                typedef const Octopussy::Message & ContainerParamType;
              };
            };
#endif


#endif
